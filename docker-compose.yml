# services:
#   axonbank1:
#     image: axonframework/axonbank
#     depends_on:
#       db:
#         condition: service_healthy
#     environment:
#       - SPRING_DATASOURCE_URL=jdbc:mysql://db:3306/axonbank?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
#       - SPRING_DATASOURCE_USERNAME=root
#       - SPRING_DATASOURCE_PASSWORD=root
#       - SPRING_DATA_ELASTICSEARCH_CLUSTER_NODES=elasticsearch:9300
#     ports:
#       - "8080:8080"
#   axonbank2:
#     image: axonframework/axonbank
#     depends_on:
#       db:
#         condition: service_healthy
#     environment:
#       - SPRING_DATASOURCE_URL=jdbc:mysql://db:3306/axonbank?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
#       - SPRING_DATASOURCE_USERNAME=root
#       - SPRING_DATASOURCE_PASSWORD=root
#       - SPRING_DATA_ELASTICSEARCH_CLUSTER_NODES=elasticsearch:9300
#     ports:
#       - "8081:8080"
services:
  axonbank1:
    image: axonframework/axonbank
    depends_on:
      db:
        condition: service_healthy
      rabbitmq: # Assuming rabbitmq also has a healthcheck or starts reliably
        condition: service_started # or service_healthy if rabbitmq has a healthcheck
      elasticsearch:
        condition: service_healthy
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://db:3306/axonbank?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=root
      - SPRING_DATA_ELASTICSEARCH_CLUSTER_NODES=elasticsearch:9300
      # Ensure actuator is exposed for Docker health check
      - management.endpoints.web.exposure.include=health 
      - management.endpoint.health.show-details=never # Keep details minimal for automated checks
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s # Give some time for the app to start up

  axonbank2:
    image: axonframework/axonbank
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_started
      elasticsearch:
        condition: service_healthy
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://db:3306/axonbank?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=root
      - SPRING_DATA_ELASTICSEARCH_CLUSTER_NODES=elasticsearch:9300
      - management.endpoints.web.exposure.include=health
      - management.endpoint.health.show-details=never
    ports:
      - "8081:8080" # Note: internal port is still 8080
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"] # Internally it's port 8080
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
  db:
    image: mysql:5.7
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_DATABASE=axonbank
    ports:
      - "3308:3306"
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
  rabbitmq:
    build: docker/rabbitmq/
  elasticsearch:
    image: elasticsearch:2.4.6
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ports:
      - "9200:9200"
      - "9300:9300"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200"]
      interval: 30s
      timeout: 10s
      retries: 5
  kibana:
    image: kibana:4.6.6
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
  logstash:
    image: docker.elastic.co/logstash/logstash:6.8.23
    volumes:
      - ./docker/logstash/pipeline:/usr/share/logstash/pipeline
    environment:
      - "LS_JAVA_OPTS=-Xms256m -Xmx256m"
    ports:
      - "5000:5000"      # Untuk input TCP/UDP jika diperlukan
      - "9600:9600"      # Monitoring API Logstash
    depends_on:
      - elasticsearch